/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.lisak.avro.lunarlanding;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LunarLanding extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2711110396634092516L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LunarLanding\",\"namespace\":\"org.lisak.avro.lunarlanding\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"probeName\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LunarLanding> ENCODER =
      new BinaryMessageEncoder<LunarLanding>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LunarLanding> DECODER =
      new BinaryMessageDecoder<LunarLanding>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LunarLanding> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LunarLanding> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LunarLanding> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LunarLanding>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LunarLanding to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LunarLanding from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LunarLanding instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LunarLanding fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence probeName;
  @Deprecated public java.lang.CharSequence country;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LunarLanding() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param probeName The new value for probeName
   * @param country The new value for country
   */
  public LunarLanding(java.lang.CharSequence date, java.lang.CharSequence probeName, java.lang.CharSequence country) {
    this.date = date;
    this.probeName = probeName;
    this.country = country;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return probeName;
    case 2: return country;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: probeName = (java.lang.CharSequence)value$; break;
    case 2: country = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'probeName' field.
   * @return The value of the 'probeName' field.
   */
  public java.lang.CharSequence getProbeName() {
    return probeName;
  }


  /**
   * Sets the value of the 'probeName' field.
   * @param value the value to set.
   */
  public void setProbeName(java.lang.CharSequence value) {
    this.probeName = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Creates a new LunarLanding RecordBuilder.
   * @return A new LunarLanding RecordBuilder
   */
  public static org.lisak.avro.lunarlanding.LunarLanding.Builder newBuilder() {
    return new org.lisak.avro.lunarlanding.LunarLanding.Builder();
  }

  /**
   * Creates a new LunarLanding RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LunarLanding RecordBuilder
   */
  public static org.lisak.avro.lunarlanding.LunarLanding.Builder newBuilder(org.lisak.avro.lunarlanding.LunarLanding.Builder other) {
    if (other == null) {
      return new org.lisak.avro.lunarlanding.LunarLanding.Builder();
    } else {
      return new org.lisak.avro.lunarlanding.LunarLanding.Builder(other);
    }
  }

  /**
   * Creates a new LunarLanding RecordBuilder by copying an existing LunarLanding instance.
   * @param other The existing instance to copy.
   * @return A new LunarLanding RecordBuilder
   */
  public static org.lisak.avro.lunarlanding.LunarLanding.Builder newBuilder(org.lisak.avro.lunarlanding.LunarLanding other) {
    if (other == null) {
      return new org.lisak.avro.lunarlanding.LunarLanding.Builder();
    } else {
      return new org.lisak.avro.lunarlanding.LunarLanding.Builder(other);
    }
  }

  /**
   * RecordBuilder for LunarLanding instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LunarLanding>
    implements org.apache.avro.data.RecordBuilder<LunarLanding> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence probeName;
    private java.lang.CharSequence country;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.lisak.avro.lunarlanding.LunarLanding.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.probeName)) {
        this.probeName = data().deepCopy(fields()[1].schema(), other.probeName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing LunarLanding instance
     * @param other The existing instance to copy.
     */
    private Builder(org.lisak.avro.lunarlanding.LunarLanding other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.probeName)) {
        this.probeName = data().deepCopy(fields()[1].schema(), other.probeName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'probeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getProbeName() {
      return probeName;
    }


    /**
      * Sets the value of the 'probeName' field.
      * @param value The value of 'probeName'.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder setProbeName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.probeName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'probeName' field has been set.
      * @return True if the 'probeName' field has been set, false otherwise.
      */
    public boolean hasProbeName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'probeName' field.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder clearProbeName() {
      probeName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public org.lisak.avro.lunarlanding.LunarLanding.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LunarLanding build() {
      try {
        LunarLanding record = new LunarLanding();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.probeName = fieldSetFlags()[1] ? this.probeName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LunarLanding>
    WRITER$ = (org.apache.avro.io.DatumWriter<LunarLanding>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LunarLanding>
    READER$ = (org.apache.avro.io.DatumReader<LunarLanding>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.date);

    out.writeString(this.probeName);

    out.writeString(this.country);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      this.probeName = in.readString(this.probeName instanceof Utf8 ? (Utf8)this.probeName : null);

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 1:
          this.probeName = in.readString(this.probeName instanceof Utf8 ? (Utf8)this.probeName : null);
          break;

        case 2:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










