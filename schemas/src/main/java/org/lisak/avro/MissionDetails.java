/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.lisak.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MissionDetails extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1019453009356753773L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MissionDetails\",\"namespace\":\"org.lisak.avro\",\"fields\":[{\"name\":\"mass\",\"type\":\"int\"},{\"name\":\"launchVehicle\",\"type\":\"string\"},{\"name\":\"goal\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MissionDetails> ENCODER =
      new BinaryMessageEncoder<MissionDetails>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MissionDetails> DECODER =
      new BinaryMessageDecoder<MissionDetails>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MissionDetails> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MissionDetails> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MissionDetails> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MissionDetails>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MissionDetails to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MissionDetails from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MissionDetails instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MissionDetails fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int mass;
  @Deprecated public java.lang.CharSequence launchVehicle;
  @Deprecated public java.lang.CharSequence goal;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MissionDetails() {}

  /**
   * All-args constructor.
   * @param mass The new value for mass
   * @param launchVehicle The new value for launchVehicle
   * @param goal The new value for goal
   */
  public MissionDetails(java.lang.Integer mass, java.lang.CharSequence launchVehicle, java.lang.CharSequence goal) {
    this.mass = mass;
    this.launchVehicle = launchVehicle;
    this.goal = goal;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mass;
    case 1: return launchVehicle;
    case 2: return goal;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mass = (java.lang.Integer)value$; break;
    case 1: launchVehicle = (java.lang.CharSequence)value$; break;
    case 2: goal = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mass' field.
   * @return The value of the 'mass' field.
   */
  public int getMass() {
    return mass;
  }


  /**
   * Sets the value of the 'mass' field.
   * @param value the value to set.
   */
  public void setMass(int value) {
    this.mass = value;
  }

  /**
   * Gets the value of the 'launchVehicle' field.
   * @return The value of the 'launchVehicle' field.
   */
  public java.lang.CharSequence getLaunchVehicle() {
    return launchVehicle;
  }


  /**
   * Sets the value of the 'launchVehicle' field.
   * @param value the value to set.
   */
  public void setLaunchVehicle(java.lang.CharSequence value) {
    this.launchVehicle = value;
  }

  /**
   * Gets the value of the 'goal' field.
   * @return The value of the 'goal' field.
   */
  public java.lang.CharSequence getGoal() {
    return goal;
  }


  /**
   * Sets the value of the 'goal' field.
   * @param value the value to set.
   */
  public void setGoal(java.lang.CharSequence value) {
    this.goal = value;
  }

  /**
   * Creates a new MissionDetails RecordBuilder.
   * @return A new MissionDetails RecordBuilder
   */
  public static org.lisak.avro.MissionDetails.Builder newBuilder() {
    return new org.lisak.avro.MissionDetails.Builder();
  }

  /**
   * Creates a new MissionDetails RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MissionDetails RecordBuilder
   */
  public static org.lisak.avro.MissionDetails.Builder newBuilder(org.lisak.avro.MissionDetails.Builder other) {
    if (other == null) {
      return new org.lisak.avro.MissionDetails.Builder();
    } else {
      return new org.lisak.avro.MissionDetails.Builder(other);
    }
  }

  /**
   * Creates a new MissionDetails RecordBuilder by copying an existing MissionDetails instance.
   * @param other The existing instance to copy.
   * @return A new MissionDetails RecordBuilder
   */
  public static org.lisak.avro.MissionDetails.Builder newBuilder(org.lisak.avro.MissionDetails other) {
    if (other == null) {
      return new org.lisak.avro.MissionDetails.Builder();
    } else {
      return new org.lisak.avro.MissionDetails.Builder(other);
    }
  }

  /**
   * RecordBuilder for MissionDetails instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MissionDetails>
    implements org.apache.avro.data.RecordBuilder<MissionDetails> {

    private int mass;
    private java.lang.CharSequence launchVehicle;
    private java.lang.CharSequence goal;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.lisak.avro.MissionDetails.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mass)) {
        this.mass = data().deepCopy(fields()[0].schema(), other.mass);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.launchVehicle)) {
        this.launchVehicle = data().deepCopy(fields()[1].schema(), other.launchVehicle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.goal)) {
        this.goal = data().deepCopy(fields()[2].schema(), other.goal);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing MissionDetails instance
     * @param other The existing instance to copy.
     */
    private Builder(org.lisak.avro.MissionDetails other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.mass)) {
        this.mass = data().deepCopy(fields()[0].schema(), other.mass);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.launchVehicle)) {
        this.launchVehicle = data().deepCopy(fields()[1].schema(), other.launchVehicle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.goal)) {
        this.goal = data().deepCopy(fields()[2].schema(), other.goal);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'mass' field.
      * @return The value.
      */
    public int getMass() {
      return mass;
    }


    /**
      * Sets the value of the 'mass' field.
      * @param value The value of 'mass'.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder setMass(int value) {
      validate(fields()[0], value);
      this.mass = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'mass' field has been set.
      * @return True if the 'mass' field has been set, false otherwise.
      */
    public boolean hasMass() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'mass' field.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder clearMass() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'launchVehicle' field.
      * @return The value.
      */
    public java.lang.CharSequence getLaunchVehicle() {
      return launchVehicle;
    }


    /**
      * Sets the value of the 'launchVehicle' field.
      * @param value The value of 'launchVehicle'.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder setLaunchVehicle(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.launchVehicle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'launchVehicle' field has been set.
      * @return True if the 'launchVehicle' field has been set, false otherwise.
      */
    public boolean hasLaunchVehicle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'launchVehicle' field.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder clearLaunchVehicle() {
      launchVehicle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'goal' field.
      * @return The value.
      */
    public java.lang.CharSequence getGoal() {
      return goal;
    }


    /**
      * Sets the value of the 'goal' field.
      * @param value The value of 'goal'.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder setGoal(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.goal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'goal' field has been set.
      * @return True if the 'goal' field has been set, false otherwise.
      */
    public boolean hasGoal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'goal' field.
      * @return This builder.
      */
    public org.lisak.avro.MissionDetails.Builder clearGoal() {
      goal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MissionDetails build() {
      try {
        MissionDetails record = new MissionDetails();
        record.mass = fieldSetFlags()[0] ? this.mass : (java.lang.Integer) defaultValue(fields()[0]);
        record.launchVehicle = fieldSetFlags()[1] ? this.launchVehicle : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.goal = fieldSetFlags()[2] ? this.goal : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MissionDetails>
    WRITER$ = (org.apache.avro.io.DatumWriter<MissionDetails>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MissionDetails>
    READER$ = (org.apache.avro.io.DatumReader<MissionDetails>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.mass);

    out.writeString(this.launchVehicle);

    out.writeString(this.goal);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.mass = in.readInt();

      this.launchVehicle = in.readString(this.launchVehicle instanceof Utf8 ? (Utf8)this.launchVehicle : null);

      this.goal = in.readString(this.goal instanceof Utf8 ? (Utf8)this.goal : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.mass = in.readInt();
          break;

        case 1:
          this.launchVehicle = in.readString(this.launchVehicle instanceof Utf8 ? (Utf8)this.launchVehicle : null);
          break;

        case 2:
          this.goal = in.readString(this.goal instanceof Utf8 ? (Utf8)this.goal : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










